# -*- coding: utf-8 -*-
"""handwrittenNumberClassification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBWK-fza72pT3WlDZ2ta3mjBrKxbMmQZ
"""

from keras.datasets import mnist                                                 #dataset of handwritten numbers
from keras.models import Sequential                                              #chia du lieu o dang ma tran thanh vector
from keras.utils import to_categorical                                           #chuyen cac gia tri dau vao thanh cac one-hot vector
import keras
from keras.layers import Dense, Activation                                       #chua cac ham kich hoat, mang noron

(xTrain,yTrain),(xTest,yTest)=mnist.load_data()                                  #lay du lieu train va test tu kho du lieu mnist

print(xTrain.shape)

xTrain=xTrain.reshape(60000,784)                                                 #chuyen tung buc anh tu 28x28 thanh 784x1

print(xTrain.shape)

xTrain=xTrain.astype('float32')                                                  #chuyen cac gia tri pixel ve khoang tu 0->1
xTrain/=255

nb_class=10                                                                      #quy dinh so lop cua mang
yTrain=to_categorical(yTrain,nb_class)                                           #chuyen du lieu nhan thanh one-hot vector

#Sequential là một cấu trúc dữ liệu trong Keras cho phép bạn xây dựng một mô hình nơ-ron dễ dàng bằng cách xếp chồng các layers.
model=Sequential()                                                               #khai bao model

#lop dau tien
#Dense là một loại layer trong mạng nơ-ron trong Keras và TensorFlow.
model.add(Dense(10,input_shape=(784,)))                                          #them layer
model.add(Activation('relu'))                                                    #them ham kich hoat

#lop thu 2
model.add(Dense(20))
model.add(Activation('relu'))

#lop cuoi
model.add(Dense(10))                                                             #so node tai lop cuoi cung phai bang so dau ra (0->9 = 10)
model.add(Activation('softmax'))                                                 #ham softmax giup chuyen doi gia tri dau ra thanh phan bo xac suat

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

model.fit(xTrain,yTrain,batch_size=128,epochs=5)

xTest=xTest.reshape(10000,784)
xTest=xTest.astype('float32')
xTest/=255

yTest=to_categorical(yTest,nb_class)

model.predict(xTest)